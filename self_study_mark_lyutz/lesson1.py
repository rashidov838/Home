import math
import random

"Числа"

# print(123+22)
# print(1.5*4)
# print(2**100)
# print(len(str(2**100)))

# print(math.pi)
# print(math.sqrt(86))

# print(random.random())
# print(random.choice([1,2,3,4,5]))

"""
        Строки применяются для записи текстовой информации (кажем, вашего имени) и
    произвольных совокупностей байтов (наподобие содержимого файла изображения).
    Они являются первым примером того, что в Python называется последовательностью —
    позиционно упорядоченной коллекцией других объектов. Для содержащихся элемен
    тов последовательности поддерживают порядок слева направо: элементы сохраняются
    и извлекаются по своим относительным позициям. Строго говоря, строки представ
    ляют собой последовательности односимвольных строк; другие более универсальные
    типы последовательностей включают списки и кортежи, рассматриваемые далее

"""

# info='spam'
# print(len(info))

# print(info[0])
# print(info[1])

# print(info[len(info)-1])

# print(info[-1])
# print(info[1:3])

# print(info[:-1]) #Снова все кроме последнего элемента

# print(info+'xyz')  # Конкатенация

# print(info*5) #repeat

# info[0]='q' #Неизменяемые объекты модифицировать нельзя
# print(info)

# info='z'+info[1:]
# print(info)


# info_2='shrubbery'
# List=list(info_2)
# print(List)

# use_join=''.join(List)
# print(use_join)



# List[1]='c'
# print(List)

# use_join=''.join(List)
# print(use_join)


# B=bytearray(b'spam')  # Гибрид байтов/списка
# B.extend(b'eggs')
# print(B.decode())   #Преобразовать в обычную строку


"""                                             
                                        Методы

    Каждая строковая операция, изученная до сих пор, на самом деле является опера
    цией над последовательностью, т.е. такие операции будут работать также с другими
    последовательностями в Python, включая списки и кортежи. Однако в дополнение к
    универсальным операциям над последовательностями строки также имеют собствен
    ные операции, доступные в виде методов — функций, которые присоединены и дейс
    твуют на специфическом объекте и инициируются посредством выражений вызовов.
"""


# info='spam'
# print(info.find('pa'))

# print(info.replace('pa','zxc'))

# line='asd,zxc,qwe'

# print(line.split(','))

# print(line.upper())

# print(info.isalpha())

# line='asd,zxc,qwe,dd\n'
# print(line.rstrip())    #'ааа,bbb,ссссс,dd'   Удалить пробельные символы с правой сторон


# print(line.rstrip().split(',')) # Скомбинировать две операци


"""Форматирование"""

# print('%s eats eggs  and  %s ' % ('sam','tomato'))  # Выражение форматирования

# print('{0} eats eggs and {1}'.format('Bekzod','tomato'))




# print('{:,.2f}'.format(29699.23435))



"""     Получение справки
    Представленные в предыдущем разделе методы — репрезентативная, но небольшая
    выборка того, что доступно для объектов строк. В целом эта книга не является исчер
    пывающей в плане рассмотрения методов объектов. Для получения дополнительных
    деталей вы всегда можете вызвать в
"""
# print(dir(info))

# print(info.__add__('__Hi'))


# st='A\nB\tC'
# print(len(st))


# print(ord('\n'))


st='spam'
print(st.encode('utf8')) #В UTF-8 кодируется как 4 байта в файлах

print( st.encode('utf16'))  #Но в UTF-16 кодируется как 10 байтов










"""'STOP=139'"""